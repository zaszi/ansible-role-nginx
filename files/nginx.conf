# Run workers under user.
user http;

# Set worker processes equal to amount of cores.
worker_processes auto;

# Bind workers to certain cpu cores. Recommended for multi-core systems.
worker_cpu_affinity auto;
    
# Scale the limit on file descriptors for workers appropriately.
worker_rlimit_nofile 4092;

# PCRE JIT can speed up processing of regular expressions significantly.
pcre_jit on;

events {
    # Amount of worker connections. Should be equal to `ulimit -n`.
    worker_connections 1024;

    # Let each process accept multiple connections.
    multi_accept on;

    # Preferred connection method for newer linux versions.
    use epoll;
}

http {
    # disables emitting nginx version on error pages and in the Server
    # response header field.
    server_tokens off;

    # Add the specified charset to the Content-Type response header field.
    charset utf-8;

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring
    # data to and from the user space.
    sendfile on;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
    # packet, instead of using partial frames. This is useful for prepending
    # headers before calling sendfile, or for throughput optimization.
    tcp_nopush on;

    # Don't buffer data-sends (disable Nagle algorithm). Good for sending
    # frequent small bursts of data in real time.
    tcp_nodelay on;

    # Set request body buffer size, 8k is recommend for 32-bit systems.
    client_body_buffer_size 8k;

    # File upload limit.
    client_max_body_size 16m;

    # Disable buffering in temporary files.
    client_body_in_single_buffer on;
   
    # Allocate a buffer for request headers.
    client_header_buffer_size 1m;

    # Set a max number and size for reading large request headers.
    large_client_header_buffers 4 8k;

    # Enable caching for file descriptors.
    open_file_cache max=1000 inactive=30s;

    # Re-validate cached objects after X time.
    open_file_cache_valid 60s;

    # Minimum required number of access before caching.
    open_file_cache_min_uses 2;

    # Cache error responses.
    open_file_cache_errors on;

    # Close connection on non-responding client.
    reset_timedout_connection on;

    # Request timed out.
    client_body_timeout 10;
    
    # Timeout for transmitting data to client.
    send_timeout 2s;
    
    # Keep connections alive for less long.
    keepalive_timeout 30s;

    # Keep maximum this amount of keepalives.
    keepalive_requests 30;

    # Enable gzip compression.
    gzip on;

    # Tell proxies to cache both compressed and regular versions.
    gzip_vary on;

    # Search for existing compressed data first.
    gzip_static on;

    # Do not compress anything smaller than defined size.
    gzip_min_length 1024;

    # Compress at the following level.
    gzip_comp_level 4;

    # Compress even when connection is via proxy (containing these headers).
    gzip_proxied expired no-cache no-store private auth;

    # Disable compression for Internet Explorer versions 1-6.
    gzip_disable "MSIE [1-6]\.";

    # Enable compression for filetypes.
    gzip_types
        application/javascript
        application/json
        application/octet-stream
        application/wasm
        application/xml
        font/woff
        font/woff2
        text/css
        text/plain

    # Resolve domains using local DNS. This will be inherited for upstream name
    # resolution and OCSP Stapling.
    resolver 127.0.0.1 [::1] valid=300s;
    resolver_timeout 30s;

    # Access log path, buffered and with periodic flushing.
    access_log /var/log/nginx/access.log combined buffer=64k flush=5m;

    # Error log path and severity.
    error_log /var/log/nginx/error.log warn;

    # Add MIME types.
    include mime.types;

    # Include Apache VirtualHost style server configuration blocks.
    include sites-enabled/*;
}
